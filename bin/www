#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('covid:server');
var http = require('http');

var bodyParser = require("body-parser");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8200');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}






















//  Gestion des évènements déclénché par l'utilisateur

//  Variable en charge de socket.io

global.io = require('socket.io').listen(server)


var controleurNotification = require("../controleurs/notifications.controlleur")


io.on('connection', function (localSocket) {


	global.socket = localSocket

	
	console.log('Un usager est connecté')


	//	Evenement envoyé pour avoir la dernière date de connexion
	socket.emit('get_last_notification_date');




	//	Evenement qui recoit la derniere date de connexion

	socket.on("last_notification_date", controleurNotification.envoi_notifications_diferre)










})








